<roblox xmlns:xmime="http://www.w3.org/2005/05/xmlmime" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.roblox.com/roblox.xsd" version="4">
<Meta name="ExplicitAutoJoints">true</Meta>
<External>null</External>
<External>nil</External>
<Item class="ModuleScript" referent="RBX6b5336b7-89cf-4b51-b8a4-bd27e7eb42b6"><Properties><string name="Name">ScreenThriDi</string><ProtectedString name="Source"><![CDATA[--!strict
--!optimize 2

local GuiService = game:GetService("GuiService")

local Component3D = require("@self/Component3D")
local types = require("@self/types")

local LOUD_CREDIT = true

local function screen_GetRealCanvasSize(self: types.Screen3D): Vector2
	return workspace.CurrentCamera.ViewportSize
end

local function screen_GetInset(self: types.Screen3D): Vector2
	return GuiService:GetGuiInset()
end

local function screen_GetInsetCanvasSize(self: types.Screen3D): Vector2
	return self:GetRealCanvasSize() - self:GetInset()
end

local function screen_GetIntendedCanvasSize(self: types.Screen3D): Vector2
	if self.rootGui.IgnoreGuiInset then
		return self:GetRealCanvasSize()
	end
	
	return self:GetInsetCanvasSize()
end

local function screen_GetComponent3D(self: types.Screen3D, guiObject: GuiObject): types.Component3D
	return self.partIndex[guiObject]
end

local screenGen = {}

--Used with <code>Component3D:Enable(a)</code>
function screenGen.createStepped(fn: (self: types.Component3D, dt: number) -> (), async: boolean?, rate: number?): types.fn_SteppedCallback
	return { fn, async, rate, rate and os.clock() }
end

function screenGen.new(screenGui: ScreenGui, displayDistance: number): types.Screen3D
	local partIndex = {}

	local self = {
		partIndex = partIndex,
		rootGui = screenGui,
		displayDistance = displayDistance,
		rootOffset = CFrame.identity,

		GetComponent3D = screen_GetComponent3D,
	
		GetRealCanvasSize = screen_GetRealCanvasSize,
		GetInsetCanvasSize = screen_GetInsetCanvasSize,
		GetIntendedCanvasSize = screen_GetIntendedCanvasSize,
		GetInset = screen_GetInset,
	}

	for _, guiobj in screenGui:GetDescendants() do
		if guiobj:IsA("GuiObject") then
			partIndex[guiobj] = Component3D.new(guiobj, self)
		end
	end

	screenGui.DescendantAdded:Connect(function(addedObj: Instance)
		if addedObj:IsA("GuiObject") then
			partIndex[addedObj] = Component3D.new(addedObj, self)
		end
	end)

	return self
end

if LOUD_CREDIT then
	print("ScreenThriDi loaded, learn more on [link or something]")
end

return screenGen
]]></ProtectedString></Properties><Item class="ModuleScript" referent="RBX5d2f6e3f-0635-4cf9-9faf-4b5f12274892"><Properties><string name="Name">Component3D</string><ProtectedString name="Source"><![CDATA[--!strict
--!native
--!optimize 2

local types = require("./types")
local process = require("./Process")

local function _pivot(original: CFrame, pivot: CFrame, angle: CFrame): CFrame
	return original:Inverse() * pivot * angle * pivot:Inverse() * original
end

local function component_Enable(self: types.Component3D, stepped: types.fn_SteppedCallback?): types.Component3D
	if self.enabled or not self.component2D then
		return self
	end	

	self.enabled = true

	local surfaceGui = Instance.new("SurfaceGui")
	local surfacePart = Instance.new("Part")

	surfacePart.CanCollide = false
	surfacePart.Anchored = true
	surfacePart.Parent = surfaceGui

	surfaceGui.Parent = self.parent2D or self.screen3D.rootGui
	surfaceGui.Face =  Enum.NormalId.Back
	surfaceGui.Adornee = surfacePart
	surfaceGui.AlwaysOnTop = true

	self.surfaceGui = surfaceGui

	self.component2D.Parent = self.surfaceGui

	--self:RecomputeParent()

	self.stepped = stepped
	process(self)

	return self
end

local function component_Disable(self: types.Component3D): types.Component3D
	if not self.enabled then
		return self
	end

	process(self)

	self.enabled = false

	if self.component2D then
		self.component2D.Parent = self.parent2D or self.screen3D.rootGui
	end

	if self.surfaceGui then
		self.surfaceGui:Destroy()
	end

	return self
end

local function component_RecomputeParent(self: types.Component3D): types.Component3D
	if self.parent2D and self.parent2D:IsA("GuiObject") then
		self.parent3D = self.screen3D:GetComponent3D(self.parent2D)
	end

	if self.surfaceGui then
		local parent = self.parent3D
		local zIndex = 0

		while parent do
			zIndex += 1
			parent = parent.parent3D
		end

		self.surfaceGui.ZOffset = zIndex
	end

	return self
end

local function component_GetStudsScreenSize(self: types.Component3D, viewportSize: Vector2): Vector3
	local trueSize =  self.screen3D:GetRealCanvasSize()

	local currentCamera = workspace.CurrentCamera
	local factor = math.tan(math.rad(currentCamera.FieldOfView)/2)

	return Vector3.new(
		(trueSize.X / trueSize.Y) * factor * (viewportSize.X / trueSize.X),
		factor  * (viewportSize.Y / trueSize.Y),
		0
	) * self.screen3D.displayDistance
end

local function component_UDim2ToCFrame(self: types.Component3D, position: UDim2): CFrame
	if not self.component2D then
		return CFrame.identity
	end

	local scaleX, scaleY = position.X.Scale, position.Y.Scale
	local offsetX, offsetY = position.X.Offset, position.Y.Offset

	local viewSize = self:GetViewportSize()

	local trueScaleX, trueScaleY = (scaleX +  offsetX / viewSize.X), (scaleY + offsetY / viewSize.Y)

	local partSize = self:GetStudsScreenSize(viewSize)

	return CFrame.new(
		(partSize.X) * (trueScaleX - 0.5),
		-(partSize.Y) * (trueScaleY - 0.5),
		0
	)
end

local function component_GetViewportSize(self: types.Component3D): Vector2
	if self.parent3D and self.parent3D.component2D then
		return self.parent3D.component2D.AbsoluteSize
	end

	return self.screen3D:GetIntendedCanvasSize()
end

local function component_ReadWorldCFrame(self: types.Component3D): CFrame
	if not self.component2D then
		return CFrame.identity
	end

	self:RecomputeParent()

	local originalCFrame, udimPos, addedPosition

	local udimMax = self:UDim2ToCFrame(UDim2.fromScale(1, 1))

	if self.parent3D then
		if not self.parent3D.component2D or not self.parent2D then
			return CFrame.identity
		end

		local anchorPoint = self.parent3D.component2D.AnchorPoint

		originalCFrame = self.parent3D:ReadWorldCFrame()
		udimPos = self.parent3D.component2D.Position

		local anchorFrame = self:UDim2ToCFrame(UDim2.fromScale(-anchorPoint.X + 0.5, -anchorPoint.Y + 0.5))

		addedPosition = self.parent3D:UDim2ToCFrame(udimPos)
			* udimMax
			* anchorFrame
			* CFrame.Angles(0, 0, -math.rad(self.parent2D.Rotation))
	else
		local viewportDiff = self.screen3D:GetRealCanvasSize() - self.screen3D:GetIntendedCanvasSize()

		originalCFrame = workspace.CurrentCamera.CFrame * CFrame.new(0,0,-(self.screen3D.displayDistance)/2 ) * self.screen3D.rootOffset
		udimPos = UDim2.new(0,viewportDiff.X/2,0,viewportDiff.Y/2)
		addedPosition = self:UDim2ToCFrame(udimPos) * self:UDim2ToCFrame(UDim2.fromScale(1, 1))
	end

	local finalCFrame = originalCFrame * addedPosition

	local finalPivot = finalCFrame
		* udimMax:Inverse()
		* self:UDim2ToCFrame(self.component2D.Position)
		* udimMax

	return finalCFrame * _pivot(finalCFrame, finalPivot, self.offset)
end

local class = {}

function class.new(guiObject: GuiObject, screen3D: types.Screen3D): types.Component3D
	local self: types.Component3D = {
		enabled = false,

		component2D = guiObject,
		surfaceGui = nil,

		parent3D = nil,
		screen3D = screen3D,

		offset = CFrame.identity,
		viewportSize = screen3D:GetIntendedCanvasSize(),

		Enable = component_Enable,
		Disable = component_Disable,

		RecomputeParent = component_RecomputeParent,

		GetStudsScreenSize = component_GetStudsScreenSize,
		ReadWorldCFrame = component_ReadWorldCFrame,
		UDim2ToCFrame = component_UDim2ToCFrame,
		GetViewportSize = component_GetViewportSize
	}

	self.viewportSize = component_GetViewportSize(self)

	if guiObject.Parent and guiObject.Parent:IsA("GuiObject") then
		self.parent2D = guiObject.Parent
	end

	return self
end

return class
]]></ProtectedString></Properties></Item><Item class="ModuleScript" referent="RBX861a075d-c8bc-47cc-991c-d99ac513117d"><Properties><string name="Name">Process</string><ProtectedString name="Source"><![CDATA[--!strict
--!native
--!optimize 2

--::thread pooling
local freeThreads = {} :: {thread}

local function runCallback(callback: (self: any, dt: number) -> (), thread: thread, arg1: any, arg2: any)
    callback(arg1, arg2)
    table.insert(freeThreads, thread)
end

local function yielder()
    while true do
        runCallback(coroutine.yield())
    end
end

--Runs given function asynchronously with given arguments
local function addThread(fn: (self: any, dt: number) -> (), arg1: any, arg2: any)
    local thread: thread
    if #freeThreads == 0 then
        thread = coroutine.create(yielder)
        coroutine.resume(thread)
    else
		thread = freeThreads[#freeThreads]
        freeThreads[#freeThreads] = nil
    end

    task.spawn(thread, fn, thread, arg1, arg2)
end
--::

local RunService = game:GetService("RunService")

local types = require("./types")

local bound: {types.Component3D} = {}

--i know varargs exist yall dw
local function runStepped(stepped: types.fn_SteppedCallback, arg1: types.Component3D, arg2: number)
	local fn = stepped[1] :: (self: types.Component3D, dt: number) -> ()
	if stepped[2] then
		addThread(fn, arg1, arg2)
	else
		fn(arg1, arg2)
	end
end

local function process(component: types.Component3D, dt: number)
	local surfaceGui = component.surfaceGui :: SurfaceGui
	local surfacePart = surfaceGui and surfaceGui.Adornee :: BasePart
	if not surfacePart then
		local index = table.find(bound, component)
		if index then
			table.remove(bound, index)
		end
		return
	end

	local viewportSize = component:GetViewportSize()

	component.viewportSize = viewportSize

	surfaceGui.CanvasSize = viewportSize
	surfacePart.Size = component:GetStudsScreenSize(viewportSize)
	surfacePart.CFrame = component:ReadWorldCFrame()

	local stepped = component.stepped
	if stepped then
		local rate = stepped[3] :: number

		if rate then
			local newTime = os.clock()
			if newTime - (stepped[4] :: number) >= 1 / rate then
				runStepped(stepped, component, dt)
				stepped[4] = newTime
			end
		else
			runStepped(stepped, component, dt)
		end
	end
end

RunService:BindToRenderStep("ScreenThriDi:Process", Enum.RenderPriority.Last.Value, function(dt)
	for i, v in ipairs(bound) do
		process(v, dt)
	end
end)

--removes or adds the component to the process
return function(component: types.Component3D)
	local index = table.find(bound, component)
	if index then
		table.remove(bound, index)
	else
		table.insert(bound, component)
	end
end]]></ProtectedString></Properties></Item><Item class="ModuleScript" referent="RBX6a392102-a453-4c74-b556-9013dda36804"><Properties><string name="Name">types</string><ProtectedString name="Source"><![CDATA[export type fn_SteppedCallback = {
	[number]: ((self: Component3D, dt: number) -> ()) | (boolean?) | (number?)
}

export type Screen3D = {
	partIndex: {[GuiObject]: Component3D},
	rootGui: ScreenGui,
	displayDistance: number,
	rootOffset: CFrame,

	GetComponent3D: (self: Screen3D, guiObject: GuiObject) -> Component3D?,
	
	GetRealCanvasSize: (self: Screen3D) -> Vector2,
	GetInsetCanvasSize: (self: Screen3D) -> Vector2,
	GetIntendedCanvasSize: (self: Screen3D) -> Vector2,
	GetInset: (self: Screen3D) -> Vector2
}

export type Component3D = {
	enabled: boolean,
	
	surfaceGui: SurfaceGui?,
	component2D: GuiObject?,
	
	parent2D: GuiObject?,
	screen3D: Screen3D,
	parent3D: Component3D?,

	offset: CFrame,
	viewportSize: Vector2,

	stepped: fn_SteppedCallback?,

	Enable: (self: Component3D, stepped: fn_SteppedCallback?) -> (Component3D),
	Disable: (self: Component3D) -> (Component3D),
	
	RecomputeParent: (self: Component3D) -> (Component3D),
	
	GetStudsScreenSize: (self: Component3D, viewportSize: Vector2) -> (Vector3),
	ReadWorldCFrame: (self: Component3D) -> (CFrame),
	UDim2ToCFrame: (self: Component3D, position2D: UDim2) -> (CFrame),
	--AbsoluteUDim2ToCFrame: (component3D, position2D: UDim2) -> CFrame,
	
	GetViewportSize: (self: Component3D) -> Vector2
}

return nil
]]></ProtectedString></Properties></Item></Item>
</roblox>